
/*=======================================================================
Task: Stata code for estimation of IPW and MSM 
========================================================================*/
*Setting globals for covariates:
global V v1 v2 v3 // time constant confounders V
global Dt0 d1_t0 d2_t0 d3_t0 yt0 // time varying confounders at t0
global Dt1 d1_t0 d2_t0 d3_t0 yt1 // time varying confounders at t0
global Dt2 d1_t0 d2_t0 d3_t0 yt2 // time varying confounders at t0
*Note: Previous measures of the outcome (yt-1) are a subset of D
*/**********************************************************************
Numerator estimates for Equation 6
************************************************************************/
*First episode
logit xt1 xt0 mt0
predict rn1
/*
*Note: Exposure is measured as a binary.
Calculation is then based on the probability of a positive outcome.
*/
reg mt1 xt1 xt0 mt0, vce(robust)
predict rmn1
gen norm_n1=normalden(mt1, rmn1, e(rmse))
/*
*Note: Mediator is measured as a continous variable.
Calculation is then based on probability density function
*/
*Second episode
logit xt2 xt1 mt1 xt0 mt0
predict rn2
reg mt2 xt2 xt1 mt1 xt0 mt0, vce(robust)
predict rmn2
gen norm_n2=normalden(mt2, rmn2, e(rmse))
*Third episode
logit xt3 xt1 xt2 mt1 mt2 xt0 mt0
predict rn3
reg mt3 xt3 xt2 xt1 mt1 mt2 xt0 mt0, vce(robust)
predict rmn3
gen norm_n3=normalden(mt3, rmn3, e(rmse))
/************************************************************************
Denominator estimates for Equation 6
************************************************************************/
*First episode
logit xt1 xt0 mt0 $Dt0 $V
predict rd1
reg mt1 xt1 xt0 mt0 $Dt0 $V, vce(robust)
predict rmd1
gen norm_n1=normalden(mt1, rmd1, e(rmse))
*Second episode
logit xt2 xt1 mt1 xt0 mt0 $Dt0 $Dt1 $V
predict rd2
reg mt2 xt2 xt1 mt1 xt0 mt0 $Dt0 $Dt1 $V, vce(robust)
predict rmd2
gen norm_n2=normalden(mt2, rmd2, e(rmse))
*Third episode
logit xt3 xt1 xt2 mt1 mt2 xt0 mt0 $Dt0 $Dt1 $Dt2 $V
predict rd3
reg mt3 xt3 xt2 xt1 mt1 mt2 xt0 mt0 $Dt0 $Dt1 $Dt2 $V, vce(robust)
predict rmd3
gen norm_n3=normalden(mt3, rmd3, e(rmse))
/************************************************************************
Applying numerator and denominator for exposure-weight in Equation 6
************************************************************************/
*Generating empty weight variable for each t.
forval i=1(1)3 {
gen swt`i'=.
}
*Filling weights with inverse probabilities for each t.
forval i=1(1)3 {
replace swt`i'= rn`i'/rd`i' if xt`i''==1
replace swt`i'= (1-rn`i')/(1-rd`i') if xt`i'==0
}
*Stabilized Treatment-Weight over T
gen swt=swt1*swt2*swt3
/************************************************************************
Applying numerator and denominator for mediator-weight in Equation 6
************************************************************************/
*Divide product of denominator through product of numerator over T.
gen dens_swm=(norm_d3*norm_d2*norm_d1)/(norm_n1*norm_n2*norm_n3)
*Final product: Exposure-weight*Mediator-weight
gen swo=swt*dens_swm
/************************************************************************
Optional:
Truncation of 1th and 99th percentile to increase stability of weight
************************************************************************/
*Inspecting percentiles of weight:
_pctile swo, nq(100)
return list
gen swo_t=swo // generating separate truncated weight variable
*Truncate values
replace swo_t=5 if swo_t>=5
replace swo_t=0.33 if swo_t<=0.33
/*
Note: Arbitrary values for 1th and 9th taken. Insert the obtained
values of the command "_pctile swo, nq(100)" for nq(2)=1th and r(r99)=99th
*/
/***********************************************************************
Numerator estimates for Equation 7
***********************************************************************/
/* Weights for Exposure History for the Mediator Marginal Structural Model */
logit xt1 xt0
predict rin1
logit xt2 xt1 xt0
predict rin2
logit xt3 xt2 xt1 xt0
predict rin3
/************************************************************************
Denominator estimates for Equation 7
************************************************************************/
logit xt1 xt0 $Dt0 $V
predict rid1
logit xt2 xt1 xt0 $Dt0 $Dt1 $V
predict rid2
logit xt3 xt2 xt1 xt0 $Dt0 $Dt1 $Dt2 $V
predict rid3
/************************************************************************
Stabilised exposure-weights for mediator-model
************************************************************************/
*Generating empty weight variable for each t.
forval i=1(1)3 {
gen swtm`i'=.
}
*Filling weights with inverse probabilities for each t.
forval i=1(1)3 {
replace swtm`i'= rin`i'/rid`i' if xt`i'==1
replace swtm`i'= (1-rin`i')/(1-rid`i') if xt`i'==0
}
/************************************************************************
Final weights for mediator-model
************************************************************************/
*Final product over T for Mediator-model
gen swtm=swtm1*swtm2*swtm3
*truncating values of weights
gen swtm_t=swtm
_pctile swtm_t, nq(100)
return list
*Truncate values
replace swo_t=5 if swo_t>=5
replace swo_t=0.33 if swo_t<=0.33
/*
Note: Again, arbitrary values for 1th and 99th taken. Insert the obtained
values of the command "_pctile swo, nq(100)" for nq(2)=1th and r(r99)=99th
*/
/************************************************************************
Estimation of final MSM & calculation of effects
************************************************************************/
*Generate cumulative measures:
gen Xcum=xt1+xt2+xt3
gen Mcum=(mt1+mt2+mt3)
*Average exposure (for Mediator-model)
gen Xavg=(xt1+xt2+xt3)/3
*Define program for interventional effect calculation:
program med_gformula, rclass
version 16
*Final Outcome MSM Equation 3:
glm yt3 Xcum Mcum [pw=swo_t], vce(cluster fallnum) link(identity)
*Storing estimates:
local ybm= _b[Mcum]
local ybx= _b[Xcum]
*Final Mediator MSM Equation 4:
glm pa_17 mmavg [pw=swtm_t], vce(cluster fallnum) link(identity)
*Storing estimates:
local mbx= _b[mmavg]
*Defining interventional effects Equation 5, where T=3
return scalar iie = `ybm' * `mbx'*3
return scalar ide = `ybx'*3
return scalar ite = (`ybm ' * `mbx'*3) + (`ybx'*3)
return scalar propm = ((`ybm' * `mbx'*3) / ((`ybm ' * `mbx'*3) + (`ybx'*3)) * 100)
end
*Bootstrapping effects to obtain C.I. with 10.000 replications
bootstrap r(iie), reps (10000) nodots:med_gformula, rclass
bootstrap r(ide), reps (10000) nodots:med_gformula, rclass
bootstrap r(ite), reps (10000) nodots:med_gformula, rclass
bootstrap r(propm), reps (10000) nodots:med_gformula, rclass
/*=======================================================================
Task end
=======================================================================*/